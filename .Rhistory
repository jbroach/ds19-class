knitr::opts_chunk$set(echo = TRUE, root.dir=normalizePath(".."))
getwd()
#source("code/fetch_biketown.R")
#get_data(start="06/2018", end="09/2018")
knitr::opts_chunk$set(echo = TRUE)
getwd()
#source("code/fetch_biketown.R")
#get_data(start="06/2018", end="09/2018")
View(OlsonNames())
bike_df1 <- paste0('data/biketown/', list.files('data/biketown')) %>%
lapply(read.csv, stringsAsFactors = F) %>%
bind_rows()
bike_df1$start.datetime <- paste(bike_df1$StartDate, bike_df1$StartTime)
head(bike_df1)
head(bike_df1$start.datetime)
bike_df1$start.datetime <- ymd_hms(bike_df1$start.datetime)
library(lubridate)
library(ggplot2)
library(modelr)
library(purrr)
library(broom)
# load bike counts & weather data (ignore the wx warnings)
source("code/load_data2.R") # note the two new variables "bikecounts" & "weather"
# join wx & bridge counts
bikecount_wx <- bikecounts %>%
left_join(weather, by = c("date" = "DATE")) %>% # note single equals here
select(date, bridge, total, TMIN, TMAX, PRCP)
biketown <- read.csv("data/biketown-2018-trips.csv",
stringsAsFactors = F)
ggplot(bikecount_wx, aes(x = date, y = total, group = bridge,
color = bridge)) +
geom_line() + facet_wrap(bikecount_wx$bridge)
# average daily bike counts by bridge
bikecounts %>%
group_by(bridge) %>%
summarize(avg_daily_counts=mean(total)) %>%
View()
# average daily bike counts by bridge
bikecounts %>%
group_by(bridge) %>%
summarize(avg_daily_counts=mean(total))
# average monthly bike counts by bridge by year
bikecounts %>%
group_by(bridge, month(date), year(date)) %>%
summarize(avg_monthly_counts=mean(total)) %>%
View()
# average monthly all time
avg_monthly <- bikecounts %>%
group_by(bridge, month(date, label = T)) %>%
summarize(avg_monthly_counts=mean(total))
ggplot(avg_monthly, aes(x = `month(date, label = T)`,
y = avg_monthly_counts,
color = bridge)) +
geom_point()
# models are objects in R
lm(total ~ TMIN + TMAX + PRCP + bridge, data = bikecount_wx) %>%
summary()
# can modify variables without storing
lm(total ~ I(40 - TMIN) + I(TMAX - 68) + I((TMAX - 68)^2) +
PRCP + bridge, data = bikecount_wx) %>% summary()
# can modify variables without storing
lm(total ~ I(40 - TMIN) + I(TMAX - 68) + I((TMAX - 68)^2) +
PRCP + bridge, data = bikecount_wx) %>% summary()
# can modify variables without storing
lm(total ~ I(40 - TMIN) + I(TMAX - 68) +
PRCP + bridge, data = bikecount_wx) %>% summary()
# can modify variables without storing
lm(total ~ I(40 - TMIN) + I(TMAX - 68) + I((TMAX - 68)^2) +
PRCP + bridge, data = bikecount_wx) %>% summary()
# can modify variables without storing
lm(total ~ TMAX + I(TMAX^2) +
PRCP + bridge, data = bikecount_wx) %>% summary()
# can modify variables without storing
lm(total ~ TMIN + TMAX + I(TMAX^2) +
PRCP + bridge, data = bikecount_wx) %>% summary()
m1_poly <- lm(total ~ I(40 - TMIN) + I(TMAX - 68) + I((TMAX - 68)^2) +
PRCP + bridge, data = bikecount_wx)
coef(m1_poly)
m1_poly <- lm(total ~ TMIN + TMAX + I(TMAX^2) +
PRCP + bridge, data = bikecount_wx)
coef(m1_poly)
f <- function(x) {198 * x - 0.99 * x^2}
p + stat_function(fun = function(x) {198 * x - 0.99 * x^2},
color="lightblue", size=2) + xlim(0, 100)
p <- ggplot(data = data.frame(x = 0),
mapping = aes(x = x))
p + stat_function(fun = function(x) {198 * x - 0.99 * x^2},
color="lightblue", size=2) + xlim(0, 100)
p + stat_function(fun = function(x) {198 * x - 0.99 * x^2},
color="salmon", size=2) + xlim(0, 100)
p + stat_function(fun = function(x) {198 * x - 0.99 * x^2},
color="salmon", size=1.5) + xlim(0, 100)
bikecount_wx <- bikecount_wx %>% modelr::add_predictions(m1_poly) %>%
mutate(pred = pred)
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total), color = "red") +
geom_line(data = bikecount_wx, aes(x = date, y = pred), color = "blue") +
facet_wrap(bikecount_wx$bridge)
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total), color = "salmon") +
geom_line(data = bikecount_wx, aes(x = date, y = pred), color = "blue") +
facet_wrap(bikecount_wx$bridge)
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge)
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000)
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
xlim(2015, 2018)
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
xlim(2015, 2018, origin=2015)
?xlim
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('1/1/2015', '1/1/2019'),
format="%d/%m/%Y"),
date_labels="%b-%Y" )
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('1/1/2015', '1/1/2019'),
format="%d/%m/%Y"),
date_labels="%b-%Y", interval="month")
?scale_x_date
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
scale_x_date(date_breaks = "1 month",
limits = as.Date(c('1/1/2015', '1/1/2019'),
format="%d/%m/%Y"),
date_labels="%b-%Y",
date_breaks="1 year")
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
scale_x_date(date_breaks = "1 year",
limits = as.Date(c('1/1/2015', '1/1/2019'),
format="%d/%m/%Y"),
date_labels="%b-%Y")
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
scale_x_date(date_breaks = "1 year",
limits = as.Date(c('1/1/2015', '1/1/2019'),
format="%d/%m/%Y"),
date_labels="%Y")
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
scale_x_date(date_breaks = "1 year",
limits = mdy(c('1/1/2015', '1/1/2019'),
format="%d/%m/%Y"),
date_labels="%Y")
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
scale_x_date(date_breaks = "1 year",
limits = as.Date(c('1/1/2015', '1/1/2019'),
format="%d/%m/%Y"),
date_labels="%Y")
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
scale_x_date(date_breaks = "1 year",
limits = as.Date(c('1/1/2018', '1/1/2019'),
format="%d/%m/%Y"),
date_labels="%Y")
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000) +
scale_x_date(date_breaks = "1 year",
limits = as.Date(c('1/1/2017', '1/1/2018'),
format="%d/%m/%Y"),
date_labels="%Y")
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "blue") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "salmon") +
facet_wrap(bikecount_wx$bridge) + ylim(0, 10000)
knitr::opts_chunk$set(echo = TRUE)
getwd()
getwd()
library(readxl)
library(lubridate)
library(dplyr)
library(lubridate)
library(dplyr)
library(readr)
input_file <- "data/Hawthorne Tilikum Steel daily bike counts 073118.xlsx"
library(readxl)
library(lubridate)
library(dplyr)
library(readr)
input_file <- "data/Hawthorne Tilikum Steel daily bike counts 073118.xlsx"
bridge_names <- c("Hawthorne", "Tilikum", "Steel")
load_data <- function(bridge_name, input_file) {
bikecounts <- read_excel(input_file, sheet = bridge_name,
skip = 1) %>%
filter(total > 0) %>%
select(date, total) %>%
mutate(bridge = bridge_name,
date = as.Date(date)) # drops useless time
}
h <- load_data("Hawthorne", input_file)
head(h)
h <- load_data("Broadway", input_file)
bikecounts <- lapply(bridge_names, load_data,
input_file = input_file) %>%
bind_rows()
head(bikecounts)
View(bkecounts)
View(bikecounts)
# factor-ize bridge name, since here it makes sense to me
bikecounts <- bikecounts %>% mutate(bridge = factor(bridge))
head(bikecounts)
# read in weather data
weather <- read_csv("data/NCDC-CDO-USC00356750.csv")
head(weather)
# read in weather data
weather <- readr::read_csv("data/NCDC-CDO-USC00356750.csv")
head(weather)
source("code/load_counts.r")
library(lubridate)
library(ggplot2)
library(modelr)
library(purrr)
library(broom)
bikecount_wx <- bikecounts %>%
left_join(weather, by = c("date" = "DATE")) %>%
select(date, bridge, total, TMIN, TMAX, PRCP)
head(bikecount_wx)
library(dplyr)
ggplot(bikecount_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line()
ggplot(bikecount_wx, aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_wrap(bridge)
bikecount_wx %>% ggplot(aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_wrap(bridge)
bikecount_wx %>% ggplot(aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_wrap(bikecount_wx$bridge)
bikecount_wx %>% ggplot(aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_wrap(bridge ~ .)
bikecount_wx %>% ggplot(aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bridge ~ .)
bikecount_wx %>% ggplot(aes(x = date, y = total,
group = bridge, color = bridge)) +
geom_line() + facet_grid(bridge ~ .) + ylim(c(0, 10000))
# average daily count by bridge
bikecounts_wx %>%
group_by(bridge) %>%
summarise(avg_daily_counts = mean(total))
# average daily count by bridge
bikecount_wx %>%
group_by(bridge) %>%
summarise(avg_daily_counts = mean(total))
# average daily count by bridge
bikecount_wx %>%
group_by(bridge) %>%
summarize(avg_daily_counts = mean(total))
bikecount_wx %>%
group_by(bridge, month(date), year(date)) %>%
summarize(avg_monthly_counts = mean(total)) %>%
View()
bikecount_wx %>%
group_by(bridge, month(date)) %>%
summarize(avg_monthly_counts = mean(total)) %>%
View()
# Average monthly all time by bridge
avg_monthly <- bikecount_wx %>%
group_by(bridge, month(date)) %>%
summarize(avg_monthly_counts = mean(total))
View(avg_monthly)
# Average monthly all time by bridge
avg_monthly <- bikecount_wx %>%
group_by(bridge, month(date, label = T)) %>%
summarize(avg_monthly_counts = mean(total))
View(avg_monthly)
# Daily average by month all time by bridge
avg_monthly <- bikecount_wx %>%
group_by(bridge, month(date, label = T)) %>%
summarize(avg_monthly_counts = mean(total))
View(avg_monthly)
# Daily average by month all time by bridge
avg_monthly <- bikecount_wx %>%
group_by(bridge, month=month(date, label = T)) %>%
summarize(avg_monthly_counts = mean(total))
str(avg_monthly)
# Daily average by month all time by bridge
avg_monthly <- bikecount_wx %>%
group_by(bridge, month=month(date, label = T)) %>%
summarize(avg_monthly_counts = mean(total)) %>%
as.data.frame()
str(avg_monthly) # note odd structure from group_by
ggplot(avg_monthly, aes(x = month,
y = avg_monthly_counts,
color = bridge)) +
geom_point(size = 2)
# models return list objects describing fit
fit <- lm(total ~ TMIN + TMAX + PRCP + bridge,
data = bikecount_wx)
str(fit)
summary(fit)
plot(fit)
fit2 <- lm(log(total) ~ TMIN + TMAX + PRCP + bridge,
data = bikecount_wx)
summary(fit2)
plot(fit2)
lm(total ~ TMIN + TMAX + PRCP + bridge,
data = bikecount_wx) %>% summary()
lm(total ~ TMIN + TMAX + I(TMAX^2) + PRCP + bridge,
data = bikecount_wx) %>% summary()
fit_poly <- lm(total ~ TMIN + TMAX + I(TMAX^2) + PRCP + bridge,
data = bikecount_wx)
summary(fit_poly)
coef(fit_poly)
str(coef(fit_poly))
summary(fit_poly)
coef(fit_poly) # could access coefs here by name or position
f <- function(x) {198 * x + -0.99 * x^2}
p <- ggplot(data = data.frame(x = 0),
mapping = aes(x = x))
f <- function(x) {198 * x + -0.99 * x^2} # from regression result
p + stat_function(fun = f, color="lightblue", size=2) +
xlim(0, 110)
p + stat_function(fun = f, color = "lightblue", size = 2) +
xlim(0, 110) + xlab("deg F") + ylab("count")
p + stat_function(fun = f, color = "red", size = 2) +
xlim(0, 110) + xlab("deg F") + ylab("count")
p + stat_function(fun = f, color = "red", size = 1) +
xlim(0, 110) + xlab("deg F") + ylab("count")
bikecount_wx <- bikecount_wx %>%
add_predictions(fit_poly) %>%
mutate(pred = pred)
head(bikecount_wx)
bikecount_wx <- bikecount_wx %>%
add_predictions(fit_poly) %>%
add_residuals(fit_poly) %>%
mutate(pred = pred, resid = resid)
head(bikecount_wx)
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "salmon") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ .)
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "salmon") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ .) +
ylim(c(0, 10000))
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "salmon") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ .) +
ylim(c(0, 5000))
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "salmon") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ .) +
ylim(c(0, 10000))
ggplot() +
geom_line(data = bikecount_wx, aes(x = date, y = total),
color = "salmon") +
geom_line(data = bikecount_wx, aes(x = date, y = pred),
color = "blue") +
facet_grid(bridge ~ ., scales = "free")
library(tidyr)
bw_nested <- bikecount_wx %>%
group_by(bridge) %>%
nest()
str(bw_nested)
View(bw_nested)
# fit to single bridge
lm(total ~ TMIN + TMAX + PRCP + bridge,
data = bw_nested[[1, "data"]]) %>%
summary()
lm(total ~ TMIN + TMAX + PRCP,
data = bw_nested[[1, "data"]]) %>%
summary()
# fit to single bridge
lm(total ~ TMIN + TMAX + PRCP,
data = bw_nested[[2, "data"]]) %>%
summary()
colnames(bw_nested)
# fit to single bridge
lm(total ~ TMIN + TMAX + PRCP,
data = bw_nested[[bridge == "Hawthorne", "data"]]) %>%
summary()
# fit to single bridge
lm(total ~ TMIN + TMAX + PRCP,
data = bw_nested[[bw_nested$bridge == "Hawthorne", "data"]]) %>%
summary()
bw_nested[[1, "bridge"]]
bw_nested[[2, "bridge"]]
bw_nested[[3, "bridge"]]
# fit to all three bridges
fit_func <- function(df) {
lm(total ~ TMIN + TMAX + PRCP,
data = df)
}
fit_func(bw_nested[[1, "data"]])
fit_func(bw_nested[[2, "data"]])
# two at time!
fits <- purrr::map(bw_nested$data[1:2],
fit_func)
fits
str(fits)
bw_nested <- bw_nested %>%
mutate(fit = purrr::map(data, fit_func),
tidy = purrr::map(fit, tidy),
glance = purrr::map(fit, glance))
str(bw_nested)
#str(bw_nested)
head(bw_nested)
# unpack or combine results
broom::tidy(bw_nested$fit[[1]])
# unpack for all 3
bw_nested %>%
unnest(glance) %>%
arrange(desc(r.squared))
# unpack for all 3
(bw_nested %>%
unnest(glance) %>%
arrange(desc(r.squared)))
bw_nested %>%
select(bridge, tidy) %>%
unnest(tidy) %>%
arrange(term, estimate, bridge)
bw_nested %>%
select(bridge, tidy) %>%
unnest(tidy) %>%
arrange(term, estimate, bridge) %>%
View()
fit_func2 <- function(df) {
lm(log(total) ~ TMIN + TMAX + PRCP,
data = df)
}
bw_nested <- bw_nested %>%
mutate(fit = purrr::map(data, fit_func2),
tidy = purrr::map(fit, tidy),
glance = purrr::map(fit, glance))
bw_nested <- bikecount_wx %>%
group_by(bridge) %>%
nest()
bw_nested <- bw_nested %>%
mutate(fit = purrr::map(data, fit_func2),
tidy = purrr::map(fit, tidy),
glance = purrr::map(fit, glance))
bw_nested %>%
select(bridge, tidy) %>%
unnest(tidy) %>%
arrange(term, estimate, bridge)
